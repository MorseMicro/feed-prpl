From e852189b0136240b0a1c6982b9d8db9cdd1616f5 Mon Sep 17 00:00:00 2001
From: Boris VANHOOF <boris.vanhoof@softathome.com>
Date: Wed, 9 Feb 2022 14:52:05 +0100
Subject: [PATCH] Issue: HOP-1004 cdrouter-172 test reports firewall on WAN
 interface as misconfigured [fix]
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

GitOrigin-RevId: 5610ce7021e74a120da116d3de93ea93116f11f2
Signed-off-by: Petr Å tetiar <ynezz@true.cz> [backported to v2.3.5]
---
 LICENSE                        |  2 +-
 scripts/firewall.defaults      |  2 +-
 scripts/firewall_ipv6.defaults |  2 +-
 src/firewall_utilities.c       | 28 ++++++++++++++++------------
 4 files changed, 19 insertions(+), 15 deletions(-)

diff --git a/LICENSE b/LICENSE
index 54a2ad7042be..aef7c6b915b2 100644
--- a/LICENSE
+++ b/LICENSE
@@ -1,6 +1,6 @@
 SPDX-License-Identifier: BSD-2-Clause-Patent
 
-SPDX-FileCopyrightText: Copyright (c) 2021 SoftAtHome
+SPDX-FileCopyrightText: Copyright (c) 2022 SoftAtHome
 
 Redistribution and use in source and binary forms, with or without modification,
 are permitted provided that the following conditions are met:
diff --git a/scripts/firewall.defaults b/scripts/firewall.defaults
index 7fe694ac9ccd..863f4873a2d2 100644
--- a/scripts/firewall.defaults
+++ b/scripts/firewall.defaults
@@ -23,7 +23,7 @@ COMMIT
 # Generated by iptables-save v1.8.3 on Fri Aug 13 12:28:31 2021
 *filter
 :INPUT DROP [0:0]
-:FORWARD ACCEPT [0:0]
+:FORWARD DROP [0:0]
 :OUTPUT ACCEPT [0:0]
 :FORWARD_Firewall - [0:0]
 :FORWARD_First - [0:0]
diff --git a/scripts/firewall_ipv6.defaults b/scripts/firewall_ipv6.defaults
index 97f4166dbb44..8dfc89012059 100644
--- a/scripts/firewall_ipv6.defaults
+++ b/scripts/firewall_ipv6.defaults
@@ -1,7 +1,7 @@
 # Generated by ip6tables-save v1.8.3 on Fri Aug 13 12:25:04 2021
 *filter
 :INPUT DROP [0:0]
-:FORWARD ACCEPT [0:0]
+:FORWARD DROP [0:0]
 :OUTPUT ACCEPT [0:0]
 :FORWARD6_Firewall - [0:0]
 :FORWARD6_First - [0:0]
diff --git a/src/firewall_utilities.c b/src/firewall_utilities.c
index d8a6650ad25c..4fe4b1e0ae5e 100644
--- a/src/firewall_utilities.c
+++ b/src/firewall_utilities.c
@@ -294,10 +294,8 @@ target_t string_to_target(const char* target) {
     return FIREWALL_TARGET_NONE;
 }
 
-bool fw_rule_callback(const fw_rule_t* const rule, const fw_rule_flag_t flag, UNUSED const char* chain, UNUSED const char* table, int index) {
+static const char* translate_rule_flag(const fw_rule_flag_t flag) {
     const char* str_flag = "unknown";
-    int ret = 0;
-    bool enabled = fw_rule_is_enabled(rule);
 
     switch(flag) {
     case FW_RULE_FLAG_NEW:
@@ -317,16 +315,22 @@ bool fw_rule_callback(const fw_rule_t* const rule, const fw_rule_flag_t flag, UN
         break;
     }
 
-    SAH_TRACEZ_INFO(ME, "Event rule[%p] flag[%s] chain[%s] table[%s] index[%d] enabled[%s]", rule, str_flag, chain, table, index, enabled ? "true" : "false");
-    // to silence warning unused with unit tests...
-    (void) str_flag;
+    return str_flag;
+}
 
-    if(enabled) {
-        if(flag != FW_RULE_FLAG_DELETED) {
-            ret = fw_replace_rule(rule, index);
-        } else {
-            ret = fw_delete_rule(rule, index);
-        }
+bool fw_rule_callback(const fw_rule_t* const rule, const fw_rule_flag_t flag, UNUSED const char* chain, UNUSED const char* table, int index) {
+    int ret = -1;
+
+    if((flag == FW_RULE_FLAG_NEW) || (flag == FW_RULE_FLAG_MODIFIED)) {
+        ret = fw_replace_rule(rule, index);
+    } else if(flag == FW_RULE_FLAG_DELETED) {
+        ret = fw_delete_rule(rule, index);
+    }
+
+    if(ret != 0) {
+        SAH_TRACEZ_ERROR(ME, "Failed to handle %s rule chain[%s] table[%s] index[%d]", translate_rule_flag(flag), chain, table, index);
+    } else {
+        SAH_TRACEZ_INFO(ME, "Handled %s rule chain[%s] table[%s] index[%d]", translate_rule_flag(flag), chain, table, index);
     }
 
     return (ret == 0);

From 557b7c006b552e68471b7a41779c1cc2c72450fb Mon Sep 17 00:00:00 2001
From: sahbot <sahbot@softathome.com>
Date: Wed, 2 Nov 2022 10:58:36 +0100
Subject: [PATCH] Fix QOS

---
 include_priv/qos-controller.h |  2 +
 src/qos-controller.c          | 76 +++++++++++++++++++++++++----------
 src/qos-queue.c               | 14 +++++++
 src/qos-scheduler.c           | 19 +++++++++
 src/qos-shaper.c              | 20 +++++++++
 5 files changed, 110 insertions(+), 21 deletions(-)

diff --git a/include_priv/qos-controller.h b/include_priv/qos-controller.h
index de4a518..7bcaa46 100644
--- a/include_priv/qos-controller.h
+++ b/include_priv/qos-controller.h
@@ -102,6 +102,8 @@ int qos_controller_dm_queue_stats_added(amxd_object_t* queue_stats_instance);
 int qos_controller_dm_queue_stats_changed(amxd_object_t* queue_stats_instance);
 int qos_controller_dm_queue_stats_removed(amxd_object_t* queue_stats_instance);
 
+void qos_controller_activate_or_deactivate_children(amxc_llist_t* node_list, qos_node_type_t type, bool activate);
+
 #ifdef __cplusplus
 }
 #endif
diff --git a/src/qos-controller.c b/src/qos-controller.c
index 0f09dd6..02621fe 100644
--- a/src/qos-controller.c
+++ b/src/qos-controller.c
@@ -281,9 +281,9 @@ int qos_controller_dm_shaper_changed(amxd_object_t* shaper_instance) {
     if(qos_shaper_dm_get_enable(shaper)) {
         qos_shaper_deactivate(shaper);
         if(shaper->intf_name && shaper->intf_name[0]) {
-            qos_shaper_activate(shaper);
+             qos_shaper_activate(shaper);
         }
-    } else {
+    }else {
         if(qos_shaper_dm_get_status(shaper) != QOS_STATUS_DISABLED) {
             qos_shaper_deactivate(shaper);
         }
@@ -334,6 +334,7 @@ int qos_controller_dm_scheduler_changed(amxd_object_t* scheduler_instance) {
     qos_scheduler_t* scheduler = NULL;
     amxc_llist_t* node_list = NULL;
 
+
     when_null(scheduler_instance, exit);
 
     scheduler = (qos_scheduler_t*) scheduler_instance->priv;
@@ -346,36 +347,18 @@ int qos_controller_dm_scheduler_changed(amxd_object_t* scheduler_instance) {
     } else {
         qos_scheduler_deactivate(scheduler);
         qos_scheduler_activate(scheduler);
-
-        //Activate all shapers.
+        //Activate all shapers. This needs to be removed once the hierarcy is set correctly on the config
         node_list = qos_node_find_parents_by_type(scheduler->node, QOS_NODE_TYPE_SHAPER);
 
         amxc_llist_for_each(it, node_list) {
             qos_node_t* node_shaper = qos_node_llist_it_get_node(it);
-
             if(!node_shaper) {
                 continue;
             }
-
             qos_controller_dm_shaper_changed(node_shaper->data.shaper->dm_object);
         }
         qos_node_llist_delete(&node_list);
-
-        //Activate all queues.
-        node_list = qos_node_find_children_by_type(scheduler->node, QOS_NODE_TYPE_QUEUE);
-
-        amxc_llist_for_each(it, node_list) {
-            qos_node_t* node_queue = qos_node_llist_it_get_node(it);
-
-            if(!node_queue) {
-                continue;
-            }
-
-            qos_controller_dm_queue_changed(node_queue->data.queue->dm_object);
-        }
-        qos_node_llist_delete(&node_list);
     }
-
     retval = 0;
 
 exit:
@@ -493,3 +476,54 @@ int qos_controller_dm_queue_stats_removed(amxd_object_t* queue_stats_instance) {
 exit:
     return retval;
 }
+
+void qos_controller_activate_or_deactivate_children(amxc_llist_t* node_list, qos_node_type_t type, bool activate) {
+    if(type == QOS_NODE_TYPE_QUEUE) {
+        amxc_llist_for_each(iter, node_list) {
+            qos_node_t* node_queue = qos_node_llist_it_get_node(iter);
+            if(!node_queue) {
+                continue;
+            }
+            if(!activate) {
+                qos_queue_deactivate((qos_queue_t*)node_queue->data.queue->dm_object->priv);
+            }
+            else{
+                if(qos_queue_dm_get_enable(node_queue->data.queue)) {
+                    qos_queue_activate((qos_queue_t*)node_queue->data.queue->dm_object->priv);
+                }
+            }
+        }
+    }
+    if(type == QOS_NODE_TYPE_SHAPER) {
+        amxc_llist_for_each(iter, node_list) {
+            qos_node_t* node_shaper = qos_node_llist_it_get_node(iter);
+            if(!node_shaper) {
+                continue;
+            }
+            if(!activate) {
+                qos_shaper_deactivate((qos_shaper_t*)node_shaper->data.shaper->dm_object->priv);
+            }
+            else {
+                if(qos_shaper_dm_get_enable(node_shaper->data.shaper)){
+                    qos_shaper_activate((qos_shaper_t*)node_shaper->data.shaper->dm_object->priv);
+               }
+            }
+        }
+    }
+    if(type == QOS_NODE_TYPE_SCHEDULER) {
+        amxc_llist_for_each(iter, node_list) {
+            qos_node_t* node_scheduler = qos_node_llist_it_get_node(iter);
+            if(!node_scheduler) {
+                continue;
+            }
+            if(!activate) {
+                qos_scheduler_deactivate((qos_scheduler_t*)node_scheduler->data.scheduler->dm_object->priv);
+            }
+            else {
+                if(qos_scheduler_dm_get_enable(node_scheduler->data.scheduler)) {
+                    qos_scheduler_activate((qos_scheduler_t*)node_scheduler->data.scheduler->dm_object->priv);
+                }
+            }
+        }
+    }
+}
diff --git a/src/qos-queue.c b/src/qos-queue.c
index 9c115ec..1c78047 100644
--- a/src/qos-queue.c
+++ b/src/qos-queue.c
@@ -77,6 +77,13 @@ static inline const char* qos_get_queue_ctrl(const qos_queue_t* const queue) {
     return amxc_var_constcast(cstring_t, amxd_object_get_param_value(queue->dm_object, CONTROLLER));
 }
 
+static void qos_queue_activate_children(const qos_queue_t* const queue, bool activate) {
+    amxc_llist_t* node_list_queue = NULL;
+    node_list_queue = qos_node_find_children_by_type(queue->node, QOS_NODE_TYPE_QUEUE);
+    qos_controller_activate_or_deactivate_children(node_list_queue, QOS_NODE_TYPE_QUEUE, activate);
+    qos_node_llist_delete(&node_list_queue);
+}
+
 int qos_queue_activate(const qos_queue_t* const queue) {
     int retval = -1;
     amxc_var_t data;
@@ -91,11 +98,15 @@ int qos_queue_activate(const qos_queue_t* const queue) {
 
     queue_ctrl = qos_get_queue_ctrl(queue);
 
+
     path = amxd_object_get_path(queue->node->dm_object, 0);
     amxc_var_set_cstring_t(&data, path);
 
     retval = amxm_execute_function(queue_ctrl, MOD_QOS_CTRL, "activate-queue", &data, &ret);
 
+    //here activate all children of the queue (after activating parent)
+    qos_queue_activate_children(queue, true);
+
     if(retval == 0) {
         qos_queue_dm_set_status(queue, QOS_STATUS_ENABLED);
     } else {
@@ -132,6 +143,9 @@ int qos_queue_deactivate(const qos_queue_t* const queue) {
     path = amxd_object_get_path(queue->node->dm_object, 0);
     amxc_var_set_cstring_t(&data, path);
 
+    //here deactivate all children of the queue (b4 deactivating parent)
+    qos_queue_activate_children(queue, false);
+
     retval = amxm_execute_function(queue_ctrl, MOD_QOS_CTRL, "deactivate-queue", &data, &ret);
 
     if(retval == 0) {
diff --git a/src/qos-scheduler.c b/src/qos-scheduler.c
index 62a956b..9365d14 100644
--- a/src/qos-scheduler.c
+++ b/src/qos-scheduler.c
@@ -79,6 +79,22 @@ static inline const char* qos_get_scheduler_ctrl(const qos_scheduler_t* const sc
     return amxc_var_constcast(cstring_t, amxd_object_get_param_value(scheduler->dm_object, CONTROLLER));
 }
 
+static void qos_scheduler_activate_children(const qos_scheduler_t* const scheduler, bool activate) {
+    amxc_llist_t* node_list_queue = NULL;
+    amxc_llist_t* node_list_shaper = NULL;
+    amxc_llist_t* node_list_scheduler = NULL;
+    node_list_queue = qos_node_find_children_by_type(scheduler->node, QOS_NODE_TYPE_QUEUE);
+    node_list_shaper = qos_node_find_parents_by_type(scheduler->node, QOS_NODE_TYPE_SHAPER);
+    node_list_scheduler = qos_node_find_children_by_type(scheduler->node, QOS_NODE_TYPE_SHAPER);
+    qos_controller_activate_or_deactivate_children(node_list_scheduler, QOS_NODE_TYPE_SCHEDULER, activate);
+    qos_controller_activate_or_deactivate_children(node_list_shaper, QOS_NODE_TYPE_SHAPER, activate);
+    qos_controller_activate_or_deactivate_children(node_list_queue, QOS_NODE_TYPE_QUEUE, activate);
+    qos_node_llist_delete(&node_list_queue);
+    qos_node_llist_delete(&node_list_shaper);
+    qos_node_llist_delete(&node_list_scheduler);
+}
+
+
 int qos_scheduler_activate(const qos_scheduler_t* const scheduler) {
     int retval = -1;
     amxc_var_t data;
@@ -98,6 +114,7 @@ int qos_scheduler_activate(const qos_scheduler_t* const scheduler) {
 
     retval = amxm_execute_function(scheduler_ctrl, MOD_QOS_CTRL, "activate-scheduler", &data, &ret);
 
+    qos_scheduler_activate_children(scheduler, true);
     if(retval == 0) {
         qos_scheduler_dm_set_status(scheduler, QOS_STATUS_ENABLED);
     } else {
@@ -134,6 +151,8 @@ int qos_scheduler_deactivate(const qos_scheduler_t* const scheduler) {
     path = amxd_object_get_path(scheduler->node->dm_object, 0);
     amxc_var_set_cstring_t(&data, path);
 
+    qos_scheduler_activate_children(scheduler, false);
+
     retval = amxm_execute_function(scheduler_ctrl, MOD_QOS_CTRL, "deactivate-scheduler", &data, &ret);
 
     if(retval == 0) {
diff --git a/src/qos-shaper.c b/src/qos-shaper.c
index 6e03d38..fa6cf5d 100644
--- a/src/qos-shaper.c
+++ b/src/qos-shaper.c
@@ -79,6 +79,22 @@ static inline const char* qos_get_shaper_ctrl(const qos_shaper_t* const shaper)
     return amxc_var_constcast(cstring_t, amxd_object_get_param_value(shaper->dm_object, CONTROLLER));
 }
 
+static void qos_shaper_activate_children(const qos_shaper_t* const shaper, bool activate) {
+    amxc_llist_t* node_scheduler_list = NULL;
+    node_scheduler_list = qos_node_find_children_by_type(shaper->node, QOS_NODE_TYPE_SCHEDULER);
+    amxc_llist_for_each(iter, node_scheduler_list) {
+        qos_node_t* node_scheduler = qos_node_llist_it_get_node(iter);
+        qos_scheduler_t* scheduler = (qos_scheduler_t*)node_scheduler->data.scheduler->dm_object->priv;
+
+        amxc_llist_t* node_list_queue = NULL;
+        node_list_queue = qos_node_find_children_by_type(scheduler->node, QOS_NODE_TYPE_QUEUE);
+        qos_controller_activate_or_deactivate_children(node_list_queue, QOS_NODE_TYPE_QUEUE, activate);
+        qos_node_llist_delete(&node_list_queue);
+    }
+    qos_node_llist_delete(&node_scheduler_list);
+}
+
+
 int qos_shaper_activate(const qos_shaper_t* const shaper) {
     int retval = -1;
     amxc_var_t data;
@@ -98,6 +114,8 @@ int qos_shaper_activate(const qos_shaper_t* const shaper) {
 
     retval = amxm_execute_function(shaper_ctrl, MOD_QOS_CTRL, "activate-shaper", &data, &ret);
 
+    qos_shaper_activate_children(shaper, true);
+
     if(retval == 0) {
         qos_shaper_dm_set_status(shaper, QOS_STATUS_ENABLED);
     } else {
@@ -134,6 +152,8 @@ int qos_shaper_deactivate(const qos_shaper_t* const shaper) {
     path = amxd_object_get_path(shaper->node->dm_object, 0);
     amxc_var_set_cstring_t(&data, path);
 
+    qos_shaper_activate_children(shaper, false);
+
     retval = amxm_execute_function(shaper_ctrl, MOD_QOS_CTRL, "deactivate-shaper", &data, &ret);
 
     if(retval == 0) {
-- 
GitLab

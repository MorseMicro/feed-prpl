From 70529aa65a3c9e16172cb99d1f11d52fc97225c1 Mon Sep 17 00:00:00 2001
From: Andrey Erokhin <a.erokhin@inango-systems.com>
Date: Wed, 21 Feb 2024 13:31:21 +0500
Subject: [PATCH] framework: tlvf: handle potentially misaligned DWord access

Fixes: PCF-1109
Signed-off-by: Andrey Erokhin <a.erokhin@inango-systems.com>
---
 CMakeLists.txt                                |  4 ++
 .../tlvf/wfa_map/tlvSpatialReuseReport.h      |  7 ++-
 .../tlvf/wfa_map/tlvSpatialReuseRequest.h     |  5 +-
 .../tlvf/wfa_map/tlvSpatialReuseReport.cpp    | 12 ++--
 .../tlvf/wfa_map/tlvSpatialReuseRequest.cpp   |  8 +--
 .../tlvf/src/include/tlvf/MisalignedProxy.h   | 58 +++++++++++++++++++
 framework/tlvf/src/include/tlvf/swap.h        | 13 +++--
 framework/tlvf/tlvf.py                        | 24 ++++++--
 8 files changed, 107 insertions(+), 24 deletions(-)
 create mode 100644 framework/tlvf/src/include/tlvf/MisalignedProxy.h

diff --git a/CMakeLists.txt b/CMakeLists.txt
index 957efacc64e6..de54cf707c64 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -151,6 +151,10 @@ elseif (TARGET_PLATFORM STREQUAL "linux")
     set(BEEROCKS_BH_WIRE_IFACE "eth1" CACHE STRING "Backhaul wire iface")
 endif()
 
+if (TARGET_PLATFORM_TYPE STREQUAL "turris-omnia")
+    add_compile_definitions(MISALIGNED_DWORD_ACCESS_NEEDS_SPECIAL_HANDLING)
+endif()
+
 # Default values - cached (are set only if not previously set)
 set(BEEROCKS_WLAN1_IFACE   "wlan0" CACHE STRING "1st WLAN iface")
 set(BEEROCKS_WLAN2_IFACE   "wlan2" CACHE STRING "2nd WLAN iface")
diff --git a/framework/tlvf/AutoGenerated/include/tlvf/wfa_map/tlvSpatialReuseReport.h b/framework/tlvf/AutoGenerated/include/tlvf/wfa_map/tlvSpatialReuseReport.h
index 5d5b38863722..070882736e03 100644
--- a/framework/tlvf/AutoGenerated/include/tlvf/wfa_map/tlvSpatialReuseReport.h
+++ b/framework/tlvf/AutoGenerated/include/tlvf/wfa_map/tlvSpatialReuseReport.h
@@ -22,6 +22,7 @@
 #include <tlvf/ClassList.h>
 #include "tlvf/wfa_map/eTlvTypeMap.h"
 #include "tlvf/common/sMacAddr.h"
+#include <tlvf/MisalignedProxy.h>
 #include <asm/byteorder.h>
 
 namespace wfa_map {
@@ -80,9 +81,9 @@ class tlvSpatialReuseReport : public BaseClass
         uint8_t& non_srg_obsspd_max_offset();
         uint8_t& srg_obsspd_min_offset();
         uint8_t& srg_obsspd_max_offset();
-        uint64_t& srg_bss_color_bitmap();
-        uint64_t& srg_partial_bssid_bitmap();
-        uint64_t& neighbor_bss_color_in_use_bitmap();
+        tlvf_uint64_t srg_bss_color_bitmap();
+        tlvf_uint64_t srg_partial_bssid_bitmap();
+        tlvf_uint64_t neighbor_bss_color_in_use_bitmap();
         uint16_t& reserved();
         void class_swap() override;
         bool finalize() override;
diff --git a/framework/tlvf/AutoGenerated/include/tlvf/wfa_map/tlvSpatialReuseRequest.h b/framework/tlvf/AutoGenerated/include/tlvf/wfa_map/tlvSpatialReuseRequest.h
index d25a9e8f098d..3b761b66e80d 100644
--- a/framework/tlvf/AutoGenerated/include/tlvf/wfa_map/tlvSpatialReuseRequest.h
+++ b/framework/tlvf/AutoGenerated/include/tlvf/wfa_map/tlvSpatialReuseRequest.h
@@ -22,6 +22,7 @@
 #include <tlvf/ClassList.h>
 #include "tlvf/wfa_map/eTlvTypeMap.h"
 #include "tlvf/common/sMacAddr.h"
+#include <tlvf/MisalignedProxy.h>
 #include <asm/byteorder.h>
 
 namespace wfa_map {
@@ -78,8 +79,8 @@ class tlvSpatialReuseRequest : public BaseClass
         uint8_t& non_srg_obsspd_max_offset();
         uint8_t& srg_obsspd_min_offset();
         uint8_t& srg_obsspd_max_offset();
-        uint64_t& srg_bss_color_bitmap();
-        uint64_t& srg_partial_bssid_bitmap();
+        tlvf_uint64_t srg_bss_color_bitmap();
+        tlvf_uint64_t srg_partial_bssid_bitmap();
         uint16_t& reserved();
         void class_swap() override;
         bool finalize() override;
diff --git a/framework/tlvf/AutoGenerated/src/tlvf/wfa_map/tlvSpatialReuseReport.cpp b/framework/tlvf/AutoGenerated/src/tlvf/wfa_map/tlvSpatialReuseReport.cpp
index cc85d950e10b..0b3450ad4161 100644
--- a/framework/tlvf/AutoGenerated/src/tlvf/wfa_map/tlvSpatialReuseReport.cpp
+++ b/framework/tlvf/AutoGenerated/src/tlvf/wfa_map/tlvSpatialReuseReport.cpp
@@ -57,16 +57,16 @@ uint8_t& tlvSpatialReuseReport::srg_obsspd_max_offset() {
     return (uint8_t&)(*m_srg_obsspd_max_offset);
 }
 
-uint64_t& tlvSpatialReuseReport::srg_bss_color_bitmap() {
-    return (uint64_t&)(*m_srg_bss_color_bitmap);
+tlvf_uint64_t tlvSpatialReuseReport::srg_bss_color_bitmap() {
+    return tlvf_uint64_t(*m_srg_bss_color_bitmap);
 }
 
-uint64_t& tlvSpatialReuseReport::srg_partial_bssid_bitmap() {
-    return (uint64_t&)(*m_srg_partial_bssid_bitmap);
+tlvf_uint64_t tlvSpatialReuseReport::srg_partial_bssid_bitmap() {
+    return tlvf_uint64_t(*m_srg_partial_bssid_bitmap);
 }
 
-uint64_t& tlvSpatialReuseReport::neighbor_bss_color_in_use_bitmap() {
-    return (uint64_t&)(*m_neighbor_bss_color_in_use_bitmap);
+tlvf_uint64_t tlvSpatialReuseReport::neighbor_bss_color_in_use_bitmap() {
+    return tlvf_uint64_t(*m_neighbor_bss_color_in_use_bitmap);
 }
 
 uint16_t& tlvSpatialReuseReport::reserved() {
diff --git a/framework/tlvf/AutoGenerated/src/tlvf/wfa_map/tlvSpatialReuseRequest.cpp b/framework/tlvf/AutoGenerated/src/tlvf/wfa_map/tlvSpatialReuseRequest.cpp
index 997c989a9eac..0d351e4a6e28 100644
--- a/framework/tlvf/AutoGenerated/src/tlvf/wfa_map/tlvSpatialReuseRequest.cpp
+++ b/framework/tlvf/AutoGenerated/src/tlvf/wfa_map/tlvSpatialReuseRequest.cpp
@@ -57,12 +57,12 @@ uint8_t& tlvSpatialReuseRequest::srg_obsspd_max_offset() {
     return (uint8_t&)(*m_srg_obsspd_max_offset);
 }
 
-uint64_t& tlvSpatialReuseRequest::srg_bss_color_bitmap() {
-    return (uint64_t&)(*m_srg_bss_color_bitmap);
+tlvf_uint64_t tlvSpatialReuseRequest::srg_bss_color_bitmap() {
+    return tlvf_uint64_t(*m_srg_bss_color_bitmap);
 }
 
-uint64_t& tlvSpatialReuseRequest::srg_partial_bssid_bitmap() {
-    return (uint64_t&)(*m_srg_partial_bssid_bitmap);
+tlvf_uint64_t tlvSpatialReuseRequest::srg_partial_bssid_bitmap() {
+    return tlvf_uint64_t(*m_srg_partial_bssid_bitmap);
 }
 
 uint16_t& tlvSpatialReuseRequest::reserved() {
diff --git a/framework/tlvf/src/include/tlvf/MisalignedProxy.h b/framework/tlvf/src/include/tlvf/MisalignedProxy.h
new file mode 100644
index 000000000000..a81c09f9a395
--- /dev/null
+++ b/framework/tlvf/src/include/tlvf/MisalignedProxy.h
@@ -0,0 +1,58 @@
+/* SPDX-License-Identifier: BSD-2-Clause-Patent
+ *
+ * SPDX-FileCopyrightText: 2016-2024 the prplMesh contributors (see AUTHORS.md)
+ *
+ * This code is subject to the terms of the BSD+Patent license.
+ * See LICENSE file for more details.
+ */
+
+#ifndef TLVF_MISALIGNED_PROXY
+#define TLVF_MISALIGNED_PROXY
+
+#include <cstdint>
+
+#ifndef MISALIGNED_DWORD_ACCESS_NEEDS_SPECIAL_HANDLING
+
+using tlvf_int64_t  = int64_t &;
+using tlvf_uint64_t = uint64_t &;
+
+using tlvf_int64_t_const  = const int64_t &;
+using tlvf_uint64_t_const = const uint64_t &;
+
+#else
+
+template <typename Int> class tlvfMisalignedProxy {
+protected:
+    void *buf;
+
+public:
+    explicit tlvfMisalignedProxy(Int &i) : buf(&i) {}
+
+    operator Int() const
+    {
+        Int ret;
+        memcpy(&ret, buf, sizeof(Int));
+        return ret;
+    }
+};
+
+template <typename Int> class tlvfMisalignedRWProxy : public tlvfMisalignedProxy<Int> {
+    using tlvfMisalignedProxy<Int>::tlvfMisalignedProxy;
+
+public:
+    Int operator=(Int i)
+    {
+        memcpy(this->buf, &i, sizeof(Int));
+        return i;
+    }
+};
+
+using tlvf_int64_t  = tlvfMisalignedRWProxy<int64_t>;
+using tlvf_uint64_t = tlvfMisalignedRWProxy<uint64_t>;
+
+using tlvf_int64_t_const  = tlvfMisalignedProxy<int64_t>;
+using tlvf_uint64_t_const = tlvfMisalignedProxy<uint64_t>;
+
+#endif
+
+#endif
diff --git a/framework/tlvf/src/include/tlvf/swap.h b/framework/tlvf/src/include/tlvf/swap.h
index 2c4d9758c0db..d528815949bf 100644
--- a/framework/tlvf/src/include/tlvf/swap.h
+++ b/framework/tlvf/src/include/tlvf/swap.h
@@ -23,6 +23,7 @@
 #else // Linux
 #include <arpa/inet.h>
 #include <stdint.h>
+#include <string.h>
 #endif
 
 inline uint64_t htonll(uint64_t x)
@@ -56,8 +57,10 @@ inline void tlvf_swap(uint8_t size, uint8_t *ptr)
         break;
     }
     case 64: {
-        uint64_t *tmp64 = reinterpret_cast<uint64_t *>(ptr);
-        swap_64(*tmp64);
+        uint64_t tmp64;
+        memcpy(&tmp64, ptr, sizeof(tmp64));
+        swap_64(tmp64);
+        memcpy(ptr, &tmp64, sizeof(tmp64));
         break;
     }
     default:
@@ -79,8 +82,10 @@ inline void tlvf_swap(uint8_t size, int8_t *ptr)
         break;
     }
     case 64: {
-        int64_t *tmp64 = reinterpret_cast<int64_t *>(ptr);
-        swap_64(*tmp64);
+        int64_t tmp64;
+        memcpy(&tmp64, ptr, sizeof(tmp64));
+        swap_64(tmp64);
+        memcpy(ptr, &tmp64, sizeof(tmp64));
         break;
     }
     default:
diff --git a/framework/tlvf/tlvf.py b/framework/tlvf/tlvf.py
index b4245d685e54..a04cef771a3e 100755
--- a/framework/tlvf/tlvf.py
+++ b/framework/tlvf/tlvf.py
@@ -1049,11 +1049,22 @@ class TlvF:
 
                     # add function to return reference
                     const = "const " if param_val_const != None or obj_meta.is_tlv_class and param_name == MetaData.TLV_TYPE_LENGTH else ""
-                    lines_h.append("%s%s& %s();" % (const, param_type, param_name))  # const
-                    lines_cpp.append("%s%s& %s::%s() {" % (
-                        const, param_type_full, obj_meta.name, param_name))
-                    lines_cpp.append("%sreturn (%s%s&)(*m_%s);" %
-                                     (self.getIndentation(1), const, param_type, param_name))
+                    if param_type in ('int64_t', 'uint64_t'):
+                        self.needMisalignedProxy = True
+
+                        if const:
+                            const = "_const"
+
+                        lines_h.append("tlvf_%s%s %s();" % (param_type, const, param_name))  # const
+                        lines_cpp.append("tlvf_%s%s %s::%s() {" % (param_type, const, obj_meta.name, param_name))
+                        lines_cpp.append("%sreturn tlvf_%s%s(*m_%s);" %
+                                        (self.getIndentation(1), param_type, const, param_name))
+                    else:
+                        lines_h.append("%s%s& %s();" % (const, param_type, param_name))  # const
+                        lines_cpp.append("%s%s& %s::%s() {" % (
+                            const, param_type_full, obj_meta.name, param_name))
+                        lines_cpp.append("%sreturn (%s%s&)(*m_%s);" %
+                                        (self.getIndentation(1), const, param_type, param_name))
                     lines_cpp.append("}")
                     lines_cpp.append("")
 
@@ -1758,6 +1769,7 @@ class TlvF:
         self.logger.debug("openFile: %s" % (self.yaml_fname))
         self.root_obj_meta = None
         self.is_root_obj = True
+        self.needMisalignedProxy = False
         self.hasClass = False
         self.multi_class = False
         self.multi_class_auto_insert = None
@@ -1808,6 +1820,8 @@ class TlvF:
             self.include_list.append("<cstddef>")
             self.include_list.append("<stdint.h>")
             self.include_list.append('<tlvf/swap.h>')
+        if self.needMisalignedProxy:
+            self.include_list.append('<tlvf/MisalignedProxy.h>')
         if not self.hasClass and obj_meta.type == MetaData.TYPE_CLASS:
             self.include_list.append('<string.h>')
             self.include_list.append('<memory>')
